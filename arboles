trait Arbol[+A]{ def valor: A}
case class Tama[+A](valor: A, izq: Arbol[A], der: Arbol[A]) extends Arbol[A]
case class Hoja[+A](valor: A) extends Arbol[A]



// tarit define un tipo de datos generico que no se puede instacnciar directamente
//case: opciones de arbol, Rama u Hoja



val h = new Hoja(5)
h.valor

val a3 = new Rama( 7, new Hoja(1), new Hoja(5) )
a.der.valor

// dado un arbol sumar elementos de un arbol
// funcion que dado un arbol retornar profundidad
// un arbol no necesariamente esta completo, funcion que retorne la profundidad



a match {
  hoja(x) => x
  rama(v,i,d) =>
}




abstract class Arbol{}
case class Hoja(valor:Int) extends Arbol
case class Rama(valor:Int, izq:Arbol, der: Arbol) extends Arbol
case class Vacio() extends Arbol




//MEZCLAR LISTAS
def listas( L1: List[Int], L2: List[Int]):List[Int]={
  (L1,L2) match{
    case (Nil,_) => _
    case (_,Nil) => _
    case (x1::r1,x2::r2) => if(x1<=x2) x1::mezclar(r1,L2)
                            else x2::mezclar(L2,r2)
  }
}



def mergeSort( l: List[Int]) = {
  l match{
    case Nil=> Nil
    case List(x) => List(x)
    case x :: r => { val(i,d) = tome(l,(l.lenght/2));
                     mezclar( mergesort(i), mergesort(d) )}
    }
  }
}






def ordenLista(l: List[Int]): List[Int] = {
  l match {
    case Nil => Nil
    case x::r => val(a,b) = partir(l)
                  mezclar(ordenar(a), ordenar(b))
  }
}

//=> partir en 2, ordenar sublistas, mezclar





//partir toma una lista y la divide en 2




def partir ( l: List[Int], n: Int): (List[Int],List[Int])={
  A match{
    case Vacio() =>(Vacio(), Vacio())
    case Hoja(v) =>if(v<=x) (Hoja(v),Vacio()) else(Vacio(), Hoja())
    case Rama(v,izq,der) if(v==x) => (Rama(izq,Rama(v,Vacio()),der))
    case Rama(v,izq,der) if(v<=x) => val (d1,d2) = partir(der,x); (Rama(v,izq,d1),d2)
    case Rama(v,izq,der) if(v>=x) => val (i1,i2) = partir(izq,x); (i1,Rama(v,i2,der))

  }
}



def insertar( c



// Mezclar 2 arboles ordenados


def mezclar( A1: Arbol, A2 : Arbol ): Arbol = {
  (A1,A2) match{
    case( vacio(),a)=> A2
    case(a, vacio())=> A1
    case(Hoja(v),A2)=> insertar(A1,v)
    case(A1,Hoja(v)=> insertar(A2,v)
  }
}






def mezclar( A1: Arbol, A2 : Arbol ): Arbol = {
//  require ordenado(A1) && ordenado(A2)
  
  (A1,A2) match{
    case( Vacio(),t)=> t
    case(t, Vacio())=> t
    case(Hoja(v),t)=> insercion(t,v)
    case(A1,Hoja(v))=> insercion(t,v)
    case(Rama(v,izq,der),v) => {val (t1,t2) = partir(t,v);
                                 Rama(mezclar(t1,izq),mezclar(t2,der))
    }
  }
}



def ordenado( a: Arbol) : Arbol = {
  a match{
    case vacio() => vacio()
    case Hoja() => Hoja(v)
    case Rama(v,izq,der) => Insertar(Mezclar(ordenado(izq),ordenador(der)),v)
  }
}

Rama(23,Rama(15,Rama(21,Hoja(7),Hoja(6)),Hoja(24)),Rama(22,Vacio(),Hoja(20)))



// dado un arbol ordenado y un numero, si aparece devolver el sub arbol


def insercion(a: Arbol, x:Int):ARbol={
  a match{
    case Vacio()=> Hoja(x)
    case Hoja(v) => if(x>=v){Rama(v,vacio(),Hoja(x))}else{Rama(v,Hoja(x),Vacio())}
    case Rama(v,i,d) => if(x>v){Rama(v,i,insercion(d,x)} else{Rama(v,insercion(i,x),d}
  }
}


/*
 Propiedasdes
 
 tamaño:
 	tamaño de las particiones sumadas es igual al tamaño del arbol original
 	
 	tamaño de la mezcla es igual a la suma de los tamaños mezclados
 	
 	tamaño no varia al ordenar
 	
 	
 	profundidad:
 		la profundidad del arbol ordenado y la profundidad del arbol sin ordenar son iguales
 		
 		
 */




